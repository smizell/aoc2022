#!/usr/bin/env ruby

require 'fileutils'
require "pry"
require "thor"

class AdventOfCodeCli < Thor
  desc "example DAY PART", "run solution with example data"
  def example(day, part)
    result, matches_example = CodeRunner.example(day, part)

    puts "Result: #{result}"

    unless matches_example.nil?
      if result == matches_example
        puts "Matches expected value!"
      else
        puts "Incorrect: expected #{matches_example} for the result"
      end
    end
  end

  desc "solve DAY PART", "run solution with input data"
  def solve(day, part)
    puts CodeRunner.solve(day, part)
  end

  desc "next_day DAY", "set up files for next day"
  def next_day(day)
    CodeRunner.next_day(day)
  end
end

class CodeRunner
  EXAMPLE_FILE_NAME = "example"
  INPUT_FILE_NAME = "input"

  def initialize(day_value, part)
    @day = Day.new(day_value)
    @part = part
  end

  def self.next_day(day_value)
    day = Day.new(day_value)
    day_id = "day#{day.num}"
    Dir.mkdir("./inputs/#{day_id}/")
    FileUtils.touch("./inputs/#{day_id}/#{EXAMPLE_FILE_NAME}")
    FileUtils.touch("./inputs/#{day_id}/#{INPUT_FILE_NAME}")
    FileUtils.touch("./lib/#{day_id}.rb")
  end

  def self.example(day, part)
    new(day, part).call(EXAMPLE_FILE_NAME)
  end

  def self.solve(day, part)
    new(day, part).call(INPUT_FILE_NAME)
  end

  def call(data_file_name)
    load_code
    data = File.read("./inputs/day#{@day.num}/#{data_file_name}.txt")
    class_name = "Day#{@day.num}"
    day_class = Object.const_get(class_name)
    method_name = "part#{@part}"
    day_code = day_class.new
    result = day_code.send(method_name, data)
    matches_example = day_code.send("#{data_file_name}_#{method_name}") rescue nil
    return result, matches_example
  end

  private

  def load_code
    file_name = "./lib/day#{@day.num}"
    require file_name
  end
end

class Day
  def initialize(day)
    @day = day
  end

  def num
    @day.rjust(2, "0")
  end
end

AdventOfCodeCli.start(ARGV)
